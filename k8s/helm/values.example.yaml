namespace: example-namespace
environment: development
ingressClass: public-nginx

app:
  serviceName: stc-ledger-app
  host: example.domain.com
  servicePort: 80
  containerPort: 3000
  image:
    repository: registry.example.com/your-org/stc-ledger:latest
    pullPolicy: Always
    pullSecretName: registry-credentials
  cert:
    secretName: tls-cert
    certPath: certs/cert.pem
    keyPath: certs/key.pem
  secrets:
    # Replace with your actual database URL in production
    databaseUrl: postgresql://username:password@postgres-host:5432/dbname?sslmode=require
    # Generate a strong random key for production
    jwtSecret: your_jwt_secret_key_at_least_32_characters_long
    # Generate a strong random key for production
    encryptionKey: your_encryption_key_at_least_32_characters_long
  configs:
    environment: production
    nodeTlsRejectUnauthorized: "0"
    appBaseUrl: https://example.domain.com/api/
  resources:
    requests:
      memory: "256Mi"
      cpu: "250m"
    limits:
      memory: "512Mi"
      cpu: "500m"

mailpit:
  # Only install in non-production environments
  enabled: ${environment != "production"}
  host: mailpit.example.domain.com
  smtpPort: 1025
  uiPort: 8025
  image:
    repository: axllent/mailpit
    tag: "v1.15"
    pullPolicy: IfNotPresent
  resources:
    requests:
      memory: "64Mi"
      cpu: "100m"
    limits:
      memory: "128Mi"
      cpu: "200m"

redis:
  # Only install in non-production environments
  enabled: ${environment != "production"}
  serviceName: redis-master
  headlessServiceName: redis-headless
  port: 6379
  replicaCount: 1

  image:
    repository: docker.io/bitnami/redis
    tag: "7.0.15"
    pullPolicy: IfNotPresent

  auth:
    enabled: true
    secretName: redis
    secretKey: redis-password
    # Replace with a strong password in production
    password: your_redis_password_here

  metrics:
    enabled: true
    image:
      repository: docker.io/bitnami/redis-exporter
      tag: "1.37.0"
      pullPolicy: IfNotPresent
    redisAlias: redis

  configMaps:
    configuration: redis-configuration
    health: redis-health
    scripts: redis-scripts

  persistence:
    size: 10Gi
    storageClass: standard
    accessMode: ReadWriteOnce

  resources:
    requests:
      cpu: "250m"
      memory: "256Mi"
    limits:
      cpu: "500m"
      memory: "512Mi"

  config:
    maxmemory: "512mb"
    maxmemoryPolicy: "allkeys-lru"
    maxclients: "10000"
    timeout: "0"
    appendonly: "yes"
    appendfsync: "everysec"

  serviceAccountName: redis

postgresql:
  # Only install in non-production environments
  enabled: ${environment != "production"}
  replicaCount: 1
  image:
    repository: postgres
    tag: "17"
    pullPolicy: IfNotPresent
  service:
    port: 5432
  resources:
    requests:
      memory: "256Mi"
      cpu: "250m"
    limits:
      memory: "512Mi"
      cpu: "500m"
  # Replace with secure credentials in production
  postgresUser: example_user
  postgresPassword: example_password
  postgresDb: example_db
  persistence:
    size: 10Gi
