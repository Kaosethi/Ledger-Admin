apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
  namespace: {{ .Values.namespace }}
  labels:
    app: kafka
    app.kubernetes.io/name: kafka
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version }}
spec:
  serviceName: kafka-headless
  replicas: 1
  podManagementPolicy: Parallel
  persistentVolumeClaimRetentionPolicy:
    whenDeleted: Retain
    whenScaled: Retain
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: kafka
      app.kubernetes.io/name: kafka
  template:
    metadata:
      labels:
        app: kafka
        app.kubernetes.io/name: kafka
        app.kubernetes.io/managed-by: Helm
        helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    spec:
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
      initContainers:
      - name: volume-permissions
        image: busybox
        command: ["sh", "-c", "mkdir -p /bitnami/kafka/data && rm -rf /bitnami/kafka/data/lost+found"]
        volumeMounts:
        - name: data
          mountPath: /bitnami/kafka/data
      containers:
      - name: kafka
        image: {{ .Values.kafka.image.repository | default "bitnami/kafka" }}:{{ .Values.kafka.image.tag | default "3.5.1" }}
        imagePullPolicy: {{ .Values.kafka.image.pullPolicy | default "IfNotPresent" }}
        env:
        - name: BITNAMI_DEBUG
          value: "true"
        - name: KAFKA_CFG_NODE_ID
          value: "0"
        - name: KAFKA_CFG_PROCESS_ROLES
          value: "broker,controller"
        - name: KAFKA_CFG_CONTROLLER_QUORUM_VOTERS
          value: "0@localhost:9093"
        - name: KAFKA_CFG_LISTENERS
          value: "PLAINTEXT://:9092,CONTROLLER://:9093"
        - name: KAFKA_CFG_ADVERTISED_LISTENERS
          value: "PLAINTEXT://kafka-0.kafka-headless:9092"
        - name: KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP
          value: "PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT"
        - name: KAFKA_CFG_CONTROLLER_LISTENER_NAMES
          value: "CONTROLLER"
        - name: KAFKA_ENABLE_KRAFT
          value: "yes"
        - name: KAFKA_KRAFT_CLUSTER_ID
          value: {{ .Values.kafka.clusterID | default "vqb3wDN_S1GrVaFkpiwfNg" | quote }}
        - name: KAFKA_CFG_LOG_DIRS
          value: "/bitnami/kafka/data"
        ports:
        - name: kafka
          containerPort: 9092
        - name: controller
          containerPort: 9093
        resources:
          requests:
            cpu: {{ .Values.kafka.resources.requests.cpu | default "200m" }}
            memory: {{ .Values.kafka.resources.requests.memory | default "1Gi" }}
          limits:
            cpu: {{ .Values.kafka.resources.limits.cpu | default "2" }}
            memory: {{ .Values.kafka.resources.limits.memory | default "2Gi" }}
        volumeMounts:
        - name: data
          mountPath: /bitnami/kafka/data
        livenessProbe:
          tcpSocket:
            port: kafka
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          tcpSocket:
            port: kafka
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        app: kafka
        app.kubernetes.io/name: kafka
    spec:
      accessModes:
      - ReadWriteOnce
      storageClassName: {{ .Values.kafka.persistence.storageClass | default "cbs" }}
      resources:
        requests:
          storage: {{ .Values.kafka.persistence.size | default "10Gi" }}