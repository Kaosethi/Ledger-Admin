-- ========== Safely Drop Triggers ==========

DO $$
BEGIN
   IF EXISTS (SELECT 1 FROM pg_class WHERE relname = 'accounts') THEN
      DROP TRIGGER IF EXISTS set_timestamp_accounts ON public.accounts;
   END IF;

   IF EXISTS (SELECT 1 FROM pg_class WHERE relname = 'merchants') THEN
      DROP TRIGGER IF EXISTS set_timestamp_merchants ON public.merchants;
   END IF;

   IF EXISTS (SELECT 1 FROM pg_class WHERE relname = 'administrators') THEN
      DROP TRIGGER IF EXISTS set_timestamp_administrators ON public.administrators;
   END IF;
END $$;

-- Drop Trigger Function
DROP FUNCTION IF EXISTS public.update_updated_at_column();

-- Drop Tables
DROP TABLE IF EXISTS public.admin_logs;
DROP TABLE IF EXISTS public.transactions;
DROP TABLE IF EXISTS public.merchants;
DROP TABLE IF EXISTS public.accounts;
DROP TABLE IF EXISTS public.administrators;

-- Drop ENUM Types
DROP TYPE IF EXISTS account_status;
DROP TYPE IF EXISTS merchant_status;
DROP TYPE IF EXISTS transaction_status;
DROP TYPE IF EXISTS transaction_type;

-- ========== ENUM Types ==========
CREATE TYPE account_status AS ENUM ('Active', 'Inactive', 'Pending', 'Suspended');
CREATE TYPE merchant_status AS ENUM ('pending_approval', 'active', 'rejected', 'suspended');
CREATE TYPE transaction_status AS ENUM ('Approved', 'Declined');
CREATE TYPE transaction_type AS ENUM ('Debit', 'Credit');

-- ========== Tables ==========

-- Administrators Table
CREATE TABLE public.administrators (
    id SERIAL PRIMARY KEY,
    email TEXT UNIQUE NOT NULL CHECK (email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'),
    password_hash TEXT NOT NULL,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL
);
COMMENT ON TABLE public.administrators IS 'Optional table for specific admin users if not handled solely by Supabase Auth.';

-- Accounts Table
CREATE TABLE public.accounts (
    id TEXT PRIMARY KEY,
    name TEXT NOT NULL,
    guardian_name TEXT,
    status account_status NOT NULL DEFAULT 'Pending',
    balance NUMERIC(10, 2) NOT NULL DEFAULT 0.00 CHECK (balance >= 0),
    hashed_pin TEXT,
    last_transaction_at TIMESTAMPTZ,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL
);
COMMENT ON COLUMN public.accounts.id IS 'Application-generated primary key (e.g., STC-...).';
COMMENT ON COLUMN public.accounts.hashed_pin IS 'Stores the securely hashed PIN, never the plain text PIN.';
COMMENT ON TABLE public.accounts IS 'Beneficiary account information. Remember to set up Row Level Security (RLS) policies in Supabase UI.';

-- Merchants Table
CREATE TABLE public.merchants (
    id TEXT PRIMARY KEY,
    business_name TEXT NOT NULL,
    contact_person TEXT NOT NULL,
    contact_email TEXT UNIQUE NOT NULL CHECK (contact_email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'),
    contact_phone TEXT NOT NULL,
    store_address TEXT NOT NULL,
    hashed_password TEXT NOT NULL,
    status merchant_status NOT NULL DEFAULT 'pending_approval',
    submitted_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
    decline_reason TEXT,
    pin_verified BOOLEAN
);
COMMENT ON COLUMN public.merchants.id IS 'Application-generated primary key (e.g., M-...).';
COMMENT ON COLUMN public.merchants.hashed_password IS 'Stores the securely hashed password, never the plain text password.';
COMMENT ON TABLE public.merchants IS 'Merchant information and application status. Remember to set up Row Level Security (RLS) policies in Supabase UI.';

-- Transactions Table
CREATE TABLE public.transactions (
    id TEXT PRIMARY KEY,
    timestamp TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
    amount NUMERIC(10, 2) NOT NULL CHECK (amount >= 0),
    type transaction_type NOT NULL,
    account_id TEXT NOT NULL REFERENCES public.accounts(id) ON DELETE RESTRICT,
    merchant_id TEXT REFERENCES public.merchants(id) ON DELETE RESTRICT,
    status transaction_status NOT NULL,
    decline_reason TEXT,
    pin_verified BOOLEAN,
    previous_balance NUMERIC(10, 2),
    new_balance NUMERIC(10, 2)
);
COMMENT ON COLUMN public.transactions.id IS 'Application-generated primary key (e.g., TX-...).';
COMMENT ON TABLE public.transactions IS 'Records of all financial transactions. Remember to set up Row Level Security (RLS) policies in Supabase UI.';

-- Admin Logs Table
CREATE TABLE public.admin_logs (
    id TEXT PRIMARY KEY,
    timestamp TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
    admin_email TEXT,
    action TEXT NOT NULL,
    target_type TEXT,
    target_id TEXT,
    details TEXT,
    CONSTRAINT fk_admin_email FOREIGN KEY (admin_email) REFERENCES public.administrators(email) ON DELETE SET NULL
);
COMMENT ON COLUMN public.admin_logs.id IS 'Application-generated primary key (e.g., LOG-...).';
COMMENT ON TABLE public.admin_logs IS 'Tracks actions performed in the Admin Dashboard. Access should be restricted via RLS.';

-- ========== Trigger Function ==========
CREATE OR REPLACE FUNCTION public.update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
   NEW.updated_at = CURRENT_TIMESTAMP;
   RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- ========== Triggers ==========
CREATE TRIGGER set_timestamp_accounts
BEFORE UPDATE ON public.accounts
FOR EACH ROW
EXECUTE FUNCTION public.update_updated_at_column();

CREATE TRIGGER set_timestamp_merchants
BEFORE UPDATE ON public.merchants
FOR EACH ROW
EXECUTE FUNCTION public.update_updated_at_column();

CREATE TRIGGER set_timestamp_administrators
BEFORE UPDATE ON public.administrators
FOR EACH ROW
EXECUTE FUNCTION public.update_updated_at_column();

-- ========== Indexes ==========
CREATE INDEX IF NOT EXISTS idx_accounts_status ON public.accounts(status);
CREATE INDEX IF NOT EXISTS idx_accounts_name ON public.accounts(name);

CREATE INDEX IF NOT EXISTS idx_merchants_status ON public.merchants(status);
CREATE INDEX IF NOT EXISTS idx_merchants_contact_email ON public.merchants(contact_email);

CREATE INDEX IF NOT EXISTS idx_transactions_account_id ON public.transactions(account_id);
CREATE INDEX IF NOT EXISTS idx_transactions_merchant_id ON public.transactions(merchant_id);
CREATE INDEX IF NOT EXISTS idx_transactions_timestamp ON public.transactions(timestamp);

CREATE INDEX IF NOT EXISTS idx_admin_logs_timestamp ON public.admin_logs(timestamp);
CREATE INDEX IF NOT EXISTS idx_admin_logs_admin_email ON public.admin_logs(admin_email);
